#!/usr/bin/env ruby

# Usage: bin/check_rubocop_update v0.52.1 v0.53.0 ~/path/to/rubocop/

require 'open3'
require 'yaml'
require 'tmpdir'
require 'etc'

def debug_print(mes)
  $stdout.puts mes
end

def sh!(*cmd, **opt)
  debug_print 'sh!: ' + cmd.join(' ')
  system(*cmd, opt.merge(exception: true))
end

def capture3!(*cmd, **opt)
  debug_print 'capture3!: ' + cmd.join(' ')
  Open3.capture3(*cmd, **opt).tap do |out, err, status|
    raise "#{out} #{err}" unless status.success?
  end
end

def each_commit(before, after, &block)
  return enum_for(__method__, before, after) unless block_given?

  commits = capture3!('git', 'log', "#{before}..#{after}", '--format=tformat:%H').yield_self do |stdout, _stderr, _status|
    stdout.each_line.map(&:chomp)
  end
  commits.each do |commit|
    block.call commit
  end
end

def has_gemfile_change?(commit, repo)
  capture3!('git', 'show', '--name-only', '--format=tformat:', commit, chdir: repo).yield_self do |stdout, _stderr, _status|
    stdout.each_line.any? do |fname|
      fname.chomp!
      fname == 'Gemfile' || fname == 'rubocop.gemspec'
    end
  end
end

def chtmpdir(&block)
  Dir.mktmpdir do |dir|
    Dir.chdir(dir) do
      block.call
    end
  end
end

def with_repositories(remote, &block)
  if File.directory?(remote)
    Dir.chdir(remote) do
      sh! 'git', 'fetch', 'origin'
    end
  end

  chtmpdir do
    repos = Array.new(Etc.nprocessors*2) do |idx|
      sh! 'git', 'clone', remote, idx.to_s
      File.join(Dir.pwd, idx.to_s)
    end
    block.call(repos)
  end
end

def cops_each_commit(before, after, remote)
  with_repositories(remote) do |repos|
    q = Thread::Queue.new
    [].tap do |result|
      Dir.chdir(repos.first) do
        each_commit(before + '~', after).each.with_index do |commit, idx|
          q << [commit, idx]
        end
      end
      q.close
      repos.map do |repo|
        Thread.new do
          while v = q.pop
            commit, idx = *v
            sh! 'rm', '-f', 'Gemfile.lock', chdir: repo if File.exist?(File.join repo, 'Gemfile.lock')
            if has_gemfile_change?(commit, repo)
              begin
                sh! 'bundle', 'install', '--local', chdir: repo
              rescue RuntimeError
                sh! 'bundle', 'install', chdir: repo
              end
            end
            sh! 'git', 'checkout', commit, chdir: repo
            rubocop_path =
              if File.exist?(File.join(repo, 'bin/rubocop'))
                'bin/rubocop'
              else
                'exe/rubocop'
              end
            capture3!(rubocop_path, '--show-cops', '--force-default-config', chdir: repo).tap do |stdout, _, _|
              result << [idx, YAML.load(stdout)]
            end
          end
        end
      end.each(&:join)
    end.sort_by(&:first).map{|_, v| v}
  end
end

def main(before, after, remote)
  {}.tap do |result|
    result[:added] = []
    result[:renamed] = []
    result[:deleted] = []

    cops = cops_each_commit(before, after, remote)
    cops.each_cons(2) do |new, old|
      added = new.keys - old.keys
      removed = old.keys - new.keys
      if added.size > removed.size && removed.size == 0
        result[:added].concat added
      elsif added.size < removed.size && added.size == 0
        result[:deleted].concat removed
      elsif added.size != 0 && removed.size != 0
        result[:renamed] << {before: removed, after: added}
      end
    end
  end
end

before = ARGV[0] || raise
after  = ARGV[1] || raise
remote = ARGV[2] || raise

out = main(before, after, remote)
res = YAML.dump(out)
puts res
fname = '/tmp/mry_check_rubocop_update_log.yaml'
File.write(fname, res)
puts "Wrote: #{fname}"
